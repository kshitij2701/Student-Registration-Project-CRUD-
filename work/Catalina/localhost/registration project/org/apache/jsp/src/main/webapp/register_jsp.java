/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/10.1.7
 * Generated at: 2023-04-27 14:41:15 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.src.main.webapp;

import jakarta.servlet.*;
import jakarta.servlet.http.*;
import jakarta.servlet.jsp.*;
import java.sql.*;

public final class register_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports,
                 org.apache.jasper.runtime.JspSourceDirectives {

  private static final jakarta.servlet.jsp.JspFactory _jspxFactory =
          jakarta.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("java.sql");
    _jspx_imports_packages.add("jakarta.servlet");
    _jspx_imports_packages.add("jakarta.servlet.http");
    _jspx_imports_packages.add("jakarta.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile jakarta.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public boolean getErrorOnELNotFound() {
    return false;
  }

  public jakarta.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final jakarta.servlet.http.HttpServletRequest request, final jakarta.servlet.http.HttpServletResponse response)
      throws java.io.IOException, jakarta.servlet.ServletException {

    if (!jakarta.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final jakarta.servlet.jsp.PageContext pageContext;
    jakarta.servlet.http.HttpSession session = null;
    final jakarta.servlet.ServletContext application;
    final jakarta.servlet.ServletConfig config;
    jakarta.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    jakarta.servlet.jsp.JspWriter _jspx_out = null;
    jakarta.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("    \r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("	<html>\r\n");
      out.write("	   <head>\r\n");
      out.write("	   <meta charset=\"UTF-8\">\r\n");
      out.write("	   <title>STUDENT REGISTRATION FORM</title>\r\n");
      out.write("	   </head>\r\n");
      out.write("	   \r\n");
      out.write("	<body>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("  ");

	String f_Name = request.getParameter("First_Name");
	String l_Name = request.getParameter("Last_Name");
	String birth_day = request.getParameter("Birthday_day");
	String birth_month = request.getParameter("Birthday_Month");
	String birth_yr = request.getParameter("Birthday_Year");
	String email_id = request.getParameter("Email_Id");
	String mob_no= request.getParameter("Mobile_Number");
	String address= request.getParameter("Address");
	String city= request.getParameter("City");
	String pin_code= request.getParameter("Pin_Code");
	String state= request.getParameter("State");
	String country= request.getParameter("Country");
	String gender= request.getParameter("Gender");
	String x_board= request.getParameter("ClassX_Board");
	String x_per= request.getParameter("ClassX_Percentage");
	String x_yop= request.getParameter("ClassX_YrOfPassing");
	String xii_board= request.getParameter("ClassXII_Board");
	String xii_per= request.getParameter("ClassXII_Percentage");
	String xii_yop= request.getParameter("ClassXII_YrOfPassing");
	String grad_board= request.getParameter("Graduation_Board");
	String grad_per= request.getParameter("Graduation_Percentage");
	String grad_yop= request.getParameter("Graduation_YrOfPassing");
	String hob_1= request.getParameter("Hobby_Drawing");
	String hob_2= request.getParameter("Hobby_Singing");
	String hob_3= request.getParameter("Hobby_Dancing");
	String hob_4= request.getParameter("Hobby_Cooking");
	String course= request.getParameter("Course");


	ResultSet rs = null;
	Connection con = null;
	PreparedStatement ps = null;

	String query = "insert into register values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
	
	try {
		
	    Class.forName("com.mysql.cj.jdbc.Driver");
	    con = DriverManager.getConnection("jdbc:mysql://localhost:3306/std_data", "root", "qwer123#");
	    ps = con.prepareStatement(query);
	
	    ps.setString(1, f_Name);
	    ps.setString(2, l_Name);
	    ps.setString(3, birth_yr + "-" + birth_month + "-" + birth_day); 
	    ps.setString(4, email_id);
	    ps.setString(5, mob_no);
	    ps.setString(6, address);
	    ps.setString(7, city);
	    ps.setString(8, pin_code);
	    ps.setString(9, state);
	    ps.setString(10, country);
	    ps.setString(11, gender);
	    ps.setString(12, x_board);
	    ps.setString(13, x_per);
	    ps.setString(14, x_yop);
	    ps.setString(15, xii_board);
	    ps.setString(16, xii_per);
	    ps.setString(17, xii_yop);
	    ps.setString(18, grad_board);
	    ps.setString(19, grad_per);
	    ps.setString(20, grad_yop);
	    ps.setString(21, (hob_1 == null ? "" : hob_1) + " " +
	            (hob_2 == null ? "" : hob_2) + " " +
	            (hob_3 == null ? "" : hob_3) + " " +
	            (hob_4 == null ? "" : hob_4));
	    ps.setString(22, course);
	    
	    int i = ps.executeUpdate();
	    if(i>0){
	        out.print("<div style='text-align:center;'><h1 style='color:green;'>Data Successfully Uploaded</h1>");
	        out.print("<div style='text-align:center; margin-top:20px;'>");
	        out.print("<a href='display.jsp' style='display:inline-block; background-color:blue; color:white; padding:10px 20px; text-decoration:none; border-radius:5px;'>View uploaded data</a>");
	        out.print("</div>");

	        

	    }else{
	        out.print("<div style='text-align:center;'><h1 style='color:red;'>Data Not Uploaded</h1></div>");
	    }

	}catch(Exception e){
		out.print(e);
	}
	
 
      out.write("\r\n");
      out.write("	\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof jakarta.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
