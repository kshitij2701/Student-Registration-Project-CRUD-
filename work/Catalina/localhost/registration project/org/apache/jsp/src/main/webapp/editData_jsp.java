/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/10.1.7
 * Generated at: 2023-04-27 14:42:14 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.src.main.webapp;

import jakarta.servlet.*;
import jakarta.servlet.http.*;
import jakarta.servlet.jsp.*;
import java.sql.*;

public final class editData_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports,
                 org.apache.jasper.runtime.JspSourceDirectives {

  private static final jakarta.servlet.jsp.JspFactory _jspxFactory =
          jakarta.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("java.sql");
    _jspx_imports_packages.add("jakarta.servlet");
    _jspx_imports_packages.add("jakarta.servlet.http");
    _jspx_imports_packages.add("jakarta.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile jakarta.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public boolean getErrorOnELNotFound() {
    return false;
  }

  public jakarta.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final jakarta.servlet.http.HttpServletRequest request, final jakarta.servlet.http.HttpServletResponse response)
      throws java.io.IOException, jakarta.servlet.ServletException {

    if (!jakarta.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final jakarta.servlet.jsp.PageContext pageContext;
    jakarta.servlet.http.HttpSession session = null;
    final jakarta.servlet.ServletContext application;
    final jakarta.servlet.ServletConfig config;
    jakarta.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    jakarta.servlet.jsp.JspWriter _jspx_out = null;
    jakarta.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>Update DATA</title>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");

	String f_Name = request.getParameter("f_name");
	String l_Name = request.getParameter("l_name");
	String dob = request.getParameter("DOB");
	String email_id = request.getParameter("email_id");
	String mob_no= request.getParameter("mob_no");
	String address= request.getParameter("address");
	String city= request.getParameter("city");
	String pincode= request.getParameter("pincode");
	String state= request.getParameter("state");
	String country= request.getParameter("country");
	String gender= request.getParameter("gender");
	String x_board= request.getParameter("x_board");
	String x_per= request.getParameter("x_per");
	String x_yop= request.getParameter("x_yop");
	String xii_board= request.getParameter("xii_board");
	String xii_per= request.getParameter("xii_per");
	String xii_yop= request.getParameter("xii_yop");
	String grad_board= request.getParameter("b_tech_institute");
	String grad_per= request.getParameter("b_tech_per");
	String grad_yop= request.getParameter("b_tech_yop");
	String hobby= request.getParameter("hobby");
	String course= request.getParameter("course");
	
	Connection con = null;
	PreparedStatement ps = null;
	int rowsAffected = 0;

	try {
		Class.forName("com.mysql.cj.jdbc.Driver");
		con = DriverManager.getConnection("jdbc:mysql://localhost:3306/std_data", "root", "qwer123#");
		String updateQuery = "UPDATE register SET f_name=?, l_name=?, dob=?, mob_no=?, address=?, city=?, pincode=?, state=?, country=?, gender=?, xth_board=?, xth_per=?, xth_yop=?, xiith_board=?, xiith_per=?, xiith_yop=?, b_tech_institute=?, b_tech_per=?, b_tech_yop=?, hobbies=?, course=? WHERE Email_Id=?";

		ps = con.prepareStatement(updateQuery);

		ps.setString(1, f_Name);
	    ps.setString(2, l_Name);
	    ps.setString(3, dob); 
	    ps.setString(4, mob_no);
	    ps.setString(5, address);
	    ps.setString(6, city);
	    ps.setString(7, pincode);
	    ps.setString(8, state);
	    ps.setString(9, country);
	    ps.setString(10, gender);
	    ps.setString(11, x_board);
	    ps.setString(12, x_per);
	    ps.setString(13, x_yop);
	    ps.setString(14, xii_board);
	    ps.setString(15, xii_per);
	    ps.setString(16, xii_yop);
	    ps.setString(17, grad_board);
	    ps.setString(18, grad_per);
	    ps.setString(19, grad_yop);
	    ps.setString(20, hobby);
	    ps.setString(21, course);
	    ps.setString(22, email_id);
	    
	    int i = ps.executeUpdate();
	    if(i>0){
	        out.print("<div style='text-align:center;'><h1 style='color:green;'>Data Successfully Updated</h1>");
	        out.print("<div style='text-align:center; margin-top:20px;'>");
	        out.print("<a href='display.jsp' style='display:inline-block; background-color:blue; color:white; padding:10px 20px; text-decoration:none; border-radius:5px;'>View updated data</a>");
	        out.print("</div>");
	    }else{
        out.print("<div style='text-align:center;'><h1 style='color:red;'>Data Not Updated</h1></div>");
        
	    }
	    }catch(Exception e){
	    	out.print(e);
	    }


      out.write("\r\n");
      out.write("    \r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof jakarta.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
